name: Update Runner Images
on:
  push:
    branches: ["main"]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:


env:
  REGISTRY_URL: ghcr.io/domstolene/openshift-actions-runners

  BASE_IMG_NAME: runner
  BASE_IMG_DIR: base

  BUILDAH_IMG_NAME: buildah-runner
  BUILDAH_IMG_DIR: buildah

  K8S_TOOLS_IMG_NAME: k8s-tools-runner
  K8S_TOOLS_IMG_DIR: k8s-tools

  NODE_IMG_NAME: node-runner-22
  NODE_IMG_DIR: node

  JAVA_IMG_NAME: java-runner-11
  JAVA_IMG_DIR: java

  DEPLOY_IMG_NAME: deploy-runner
  DEPLOY_IMG_DIR: deploy

  PLAYWRIGHT_IMG_NAME: playwright-runner
  PLAYWRIGHT_IMG_DIR: playwright

jobs:
  update_images:
    name: Update images
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v5

      - uses: redhat-actions/common/commit-data@v1
        id: commit_data

      - uses: lots0logs/gh-action-get-changed-files@2.2.2
        id: get_changed_files
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine changed directories
        id: is_dir_changed
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = ${{ steps.get_changed_files.outputs.all }};
            console.log(`Changed files: ${JSON.stringify(changedFiles)}`);

            // console.log(`payload ${JSON.stringify(context.payload)}`);
            // console.log(`eventName ${JSON.stringify(context.eventName)}`);

            const BASE = "base";
            const dirsChanged = {
              [BASE]: false,
              buildah: false,
              "k8s-tools": false,
              java: false,
              node: false,
              deploy: false,
              playwright: false,
            };

            Object.keys(dirsChanged).forEach((dir) => {
              const changed = changedFiles.find((changedFile) => changedFile.startsWith(dir + "/")) != null;
              dirsChanged[dir] = changed;
            });

            let rebuildAll = false;
            if (context.ref.startsWith("refs/tags/")) {
              console.log(`Tag build; all images will be rebuilt.`);
              rebuildAll = true;
            }
            else if (context.eventName === "workflow_dispatch") {
              console.log(`Workflow triggered by workflow_dispatch; all images will be rebuilt`);
              rebuildAll = true;
            }
            else if (dirsChanged[BASE]) {
              console.log("Base image changed; all images will be rebuilt.");
              rebuildAll = true;
            }

            Object.keys(dirsChanged).forEach((dir) => {
              const changed = rebuildAll || dirsChanged[dir];

              const outputName = (dir + "_changed").toUpperCase();
              console.log(`${outputName}=${changed}`)
              core.exportVariable(outputName, changed);
            });

            // const anyChanged = Object.entries(dirsChanged).find(([k, v] => dirsChanged[k]));
            return dirsChanged;

      - name: Determine image tag
        shell: bash
        run: |
          export IMG_TAGS=latest
          export GIT_TAG="${{ steps.commit_data.outputs.tag }}"
          export BRANCH="${{ steps.commit_data.outputs.branch }}"

          if [[ -n "$GIT_TAG" ]]; then
            IMG_TAGS="$GIT_TAG"
          elif [[ -n "$BRANCH" ]]; then
            if [[ "$BRANCH" == "main" ]]; then
              IMG_TAGS="latest"
            else
              IMG_TAGS=$BRANCH
            fi
          else
            IMG_TAGS="${{ steps.commit_data.outputs.short_sha }}"
          fi

          echo "IMG_TAGS=$IMG_TAGS" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "Tagging images with '$IMG_TAGS'"

      # The child image builds are done on the same machine so that
      # it doesn't have to pull the updated base image; it's already there locally.
      - name: Determine parent image name and tag
        shell: bash
        run: |
          export FIRST_TAG=$(echo "${{ env.IMG_TAGS }}" | awk '{ print $1 }')

          # export BASE_IMG=${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:$FIRST_TAG
          export BASE_IMG=${{ env.BASE_IMG_NAME }}:$FIRST_TAG
          echo "Base image is '$BASE_IMG'"
          echo BASE_IMG=$BASE_IMG >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base image
        id: build_base_img
        if: env.BASE_CHANGED == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.BASE_IMG_DIR }}
          file: ${{ env.BASE_IMG_DIR }}/Containerfile
          push: ${{ steps.commit_data.outputs.is_pr == 'false' }}
          tags: ${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:${{ env.IMG_TAGS }}

      - name: Determine if child images should be built
        run: |
          export BUILD_BASE_OUTCOME="${{ steps.build_base_img.outcome }}"

          if [[ $BUILD_BASE_OUTCOME == "success" ]] || [[ $BUILD_BASE_OUTCOME == "skipped" ]]; then
            echo "Base image was built or did not need to be built"
            echo "Child images will be built"
            export BUILD_CHILDREN=true
          else
            export BUILD_CHILDREN=false
            echo "Base image build failed"
            echo "Child image builds will be skipped."
          fi
          echo "BUILD_CHILDREN=$BUILD_CHILDREN" >> $GITHUB_ENV

      - name: Build and push buildah image
        if: |
          always() &&
          env.BUILDAH_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.BUILDAH_IMG_DIR }}
          file: ${{ env.BUILDAH_IMG_DIR }}/Containerfile
          push: ${{ steps.commit_data.outputs.is_pr == 'false' }}
          tags: ${{ env.REGISTRY_URL }}/${{ env.BUILDAH_IMG_NAME }}:${{ env.IMG_TAGS }}

      - name: Build and push K8s tools image
        if: |
          always() &&
          env.K8S-TOOLS_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.K8S_TOOLS_IMG_DIR }}
          file: ${{ env.K8S_TOOLS_IMG_DIR }}/Containerfile
          push: ${{ steps.commit_data.outputs.is_pr == 'false' }}
          tags: ${{ env.REGISTRY_URL }}/${{ env.K8S_TOOLS_IMG_NAME }}:${{ env.IMG_TAGS }}

      - name: Build and push node image
        if: |
          always() &&
          env.NODE_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.NODE_IMG_DIR }}
          file: ${{ env.NODE_IMG_DIR }}/Containerfile
          push: ${{ steps.commit_data.outputs.is_pr == 'false' }}
          tags: ${{ env.REGISTRY_URL }}/${{ env.NODE_IMG_NAME }}:${{ env.IMG_TAGS }}

      - name: Build and push java image
        if: |
          always() &&
          env.JAVA_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.JAVA_IMG_DIR }}
          file: ${{ env.JAVA_IMG_DIR }}/Containerfile
          push: ${{ steps.commit_data.outputs.is_pr == 'false' }}
          tags: ${{ env.REGISTRY_URL }}/${{ env.JAVA_IMG_NAME }}:${{ env.IMG_TAGS }}

      - name: Build and push deploy image
        if: |
          always() &&
          env.DEPLOY_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DEPLOY_IMG_DIR }}
          file: ${{ env.DEPLOY_IMG_DIR }}/Containerfile
          push: ${{ steps.commit_data.outputs.is_pr == 'false' }}
          tags: ${{ env.REGISTRY_URL }}/${{ env.DEPLOY_IMG_NAME }}:${{ env.IMG_TAGS }}

      - name: Build and push playwright image
        if: |
          always() &&
          env.PLAYWRIGHT_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.PLAYWRIGHT_IMG_DIR }}
          file: ${{ env.PLAYWRIGHT_IMG_DIR }}/Containerfile
          push: ${{ steps.commit_data.outputs.is_pr == 'false' }}
          tags: ${{ env.REGISTRY_URL }}/${{ env.PLAYWRIGHT_IMG_NAME }}:${{ env.IMG_TAGS }}
